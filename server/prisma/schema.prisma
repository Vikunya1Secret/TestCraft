generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(TEACHER)
  createdAt DateTime @default(now())
  tests     Test[]   @relation("TestCreator")
  updatedAt DateTime @updatedAt
}

model Test {
  id                          Int         @id @default(autoincrement())
  creator                     User        @relation("TestCreator", fields: [creatorId], references: [id])
  creatorId                   Int         @map("creator_id")
  title                       String
  description                 String?
  testTime                    Int?        @map("test_time") // в минутах
  startDate                   DateTime?   @map("start_date")
  endDate                     DateTime?   @map("end_date")
  passingThreshold            Float?      @map("passing_threshold") // в процентах или баллах
  isActive                    Boolean     @default(true) @map("is_active")
  successfulCompletionMessage String?     @map("successful_completion_message") @default("Поздравляем! Вы успешно прошли тест.")
  failureMessage              String?     @map("failure_message") @default("К сожалению, вы не прошли тест. Попробуйте еще раз.")
  accessLink                  String?     @unique @map("access_link")
  requiresManualReview        Boolean     @default(false) @map("requires_manual_review")
  questions                   Question[]
  attempts                    Attempt[]
  createdAt                   DateTime    @default(now()) @map("created_at")
  updatedAt                   DateTime    @updatedAt @map("updated_at")

  @@index([creatorId])
}

model Question {
  id             Int          @id @default(autoincrement())
  test           Test         @relation(fields: [testId], references: [id])
  testId         Int          @map("test_id")
  questionText   String       @map("question_text")
  questionType   QuestionType @default(SINGLE_CHOICE) @map("question_type")
  points         Int          @default(1)
  options        Json?        // Для всех типов вопросов, кроме TEXT_INPUT
  correctAnswer  Json?        @map("correct_answer") // Для автоматической проверки
  orderNumber    Int          @map("order_number") @default(0)
  answers        Answer[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@index([testId])
}

model Student {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  institution     String?
  specialization  String?
  createdAt       DateTime   @default(now()) @map("created_at")
  attempts        Attempt[]
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([email])
}

model Attempt {
  id              Int       @id @default(autoincrement())
  test            Test      @relation(fields: [testId], references: [id])
  testId          Int       @map("test_id")
  student         Student   @relation(fields: [studentId], references: [id])
  studentId       Int       @map("student_id")
  startTime       DateTime  @map("start_time")
  endTime         DateTime? @map("end_time")
  score           Float?    // Абсолютный балл
  percentage      Float?    // Процент правильных ответов
  passed          Boolean?
  resultSent      Boolean   @default(false) @map("result_sent")
  isReviewed      Boolean   @default(false) @map("is_reviewed") // Для ручной проверки
  answers         Answer[]
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([testId, studentId])
  @@index([createdAt])
}

model Answer {
  id             Int      @id @default(autoincrement())
  attempt        Attempt  @relation(fields: [attemptId], references: [id])
  attemptId      Int      @map("attempt_id")
  question       Question @relation(fields: [questionId], references: [id])
  questionId     Int      @map("question_id")
  studentAnswer  Json?    @map("student_answer")
  isCorrect      Boolean? @map("is_correct")
  pointsEarned   Float?   @default(0) @map("points_earned")
  teacherComment String?  @map("teacher_comment") // Для ручной проверки
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([attemptId, questionId])
}

enum UserRole {
  ADMIN
  TEACHER
}

enum QuestionType {
  SINGLE_CHOICE   @map("single_choice")
  MULTIPLE_CHOICE @map("multiple_choice")
  TEXT_INPUT      @map("text_input")
  MATCHING        @map("matching")
  SEQUENCE        @map("sequence")
}